// <auto-generated />
using System;
using AhliFans.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AhliFans.WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220908195355_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.BroadcastChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("BroadcastChannel", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Cairo",
                            NameAr = "القاهرة"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Al-Qalyubia",
                            NameAr = "القليوبية"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Giza",
                            NameAr = "الجيزة"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("BiographyAr")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Pic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TeamCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeamCategoryId");

                    b.HasIndex("TitleId");

                    b.ToTable("Coach", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1960, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            CountryId = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2019, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Pitso",
                            FirstNameAr = "بيتسو",
                            IsCurrent = false,
                            IsDeleted = false,
                            LastName = "Mosimane",
                            LastNameAr = "موسيماني",
                            Pic = "pitso-mosimane.png",
                            TitleId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1960, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            CountryId = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ricardo",
                            FirstNameAr = "ريكاردو",
                            IsCurrent = true,
                            IsDeleted = false,
                            LastName = "Suarez",
                            LastNameAr = "سواريز",
                            TitleId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1960, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            CountryId = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Syed ",
                            FirstNameAr = "سيد",
                            IsCurrent = true,
                            IsDeleted = false,
                            LastName = "Abdul Hafeez",
                            LastNameAr = "عبد الحفيظ",
                            TitleId = 2
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Egypt",
                            NameAr = "مصر"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<TimeSpan?>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.FanNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.HasIndex("NotificationId");

                    b.ToTable("FanNotifications");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.FanPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AfricanTrophyId")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FavoriteCoachAllTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteMoment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoritePlayerAllTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocalTrophyId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AfricanTrophyId");

                    b.HasIndex("CoachId");

                    b.HasIndex("FanId");

                    b.HasIndex("LocalTrophyId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FanPreference", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.GeneralPlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralPlayerPosition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Goalkeepers",
                            NameAr = "حراس المرمي"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Defenders",
                            NameAr = "مدافعين"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Midfielder",
                            NameAr = "وسط ملعب"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Attackers",
                            NameAr = "مهاجمين"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Honor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonalAchievementId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TrophyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("PersonalAchievementId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TrophyId");

                    b.ToTable("Honor", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Jersey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Jerseys");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2019, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "League Championship",
                            NameAr = "بطوله الدوري"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.LeagueDates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("LeagueDates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            LeagueId = 1,
                            Year = 2012
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            LeagueId = 1,
                            Year = 2018
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            LeagueId = 1,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.LegendBirthDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("LegendBirthDate", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActualTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BroadcastChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAway")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JerseyId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueDateId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchStatus")
                        .HasColumnType("int");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<int?>("OpponentScore")
                        .HasColumnType("int");

                    b.Property<int>("OpponentTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlannedTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BroadcastChannelId");

                    b.HasIndex("JerseyId");

                    b.HasIndex("LeagueDateId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("OpponentTeamId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Match", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 1,
                            LeagueId = 1,
                            MatchType = 2,
                            OpponentScore = 2,
                            OpponentTeamId = 1,
                            PlannedDate = new DateTime(2012, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            Score = 3,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 1,
                            LeagueId = 1,
                            MatchType = 2,
                            OpponentScore = 2,
                            OpponentTeamId = 1,
                            PlannedDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            Score = 3,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 1,
                            LeagueId = 1,
                            MatchType = 2,
                            OpponentScore = 2,
                            OpponentTeamId = 1,
                            PlannedDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            Score = 3,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 1,
                            LeagueId = 1,
                            MatchType = 1,
                            OpponentScore = 2,
                            OpponentTeamId = 1,
                            PlannedDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            Score = 3,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 1,
                            LeagueId = 1,
                            MatchType = 2,
                            OpponentScore = 2,
                            OpponentTeamId = 3,
                            PlannedDate = new DateTime(2012, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            Score = 3,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 2,
                            LeagueId = 1,
                            MatchType = 0,
                            OpponentTeamId = 2,
                            PlannedDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 2,
                            LeagueId = 1,
                            MatchType = 0,
                            OpponentTeamId = 1,
                            PlannedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsAway = false,
                            IsDeleted = false,
                            LeagueDateId = 3,
                            LeagueId = 1,
                            MatchType = 0,
                            OpponentTeamId = 3,
                            PlannedDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlannedTime = "9:30Pm",
                            RefereeId = 1,
                            SeasonId = 1,
                            StadiumId = 1,
                            Time = "90"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchBroadcastChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchBroadcastChannels");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForAhly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRed")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MatchId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchesCards");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSecondHalf")
                        .HasColumnType("bit");

                    b.Property<int>("MatchEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchEventTypeId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchEvent", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MatchEventType", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AdminCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminModifyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForAhly")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminCreateId");

                    b.HasIndex("AdminModifyId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchesGoals");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchLineUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSubstitute")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("X")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Y")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.ToTable("MatchLineUp", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchMedia");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatisticsCoefficientId")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MatchId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatisticsCoefficientId");

                    b.HasIndex("StatisticsTypeId");

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("MatchStatisticsType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7214),
                            IsEnabled = true,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7226),
                            Name = "General",
                            NameAr = "عام"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7232),
                            IsEnabled = false,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7233),
                            Name = "Attacking",
                            NameAr = "هجوم"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7235),
                            IsEnabled = false,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7235),
                            Name = "Defending",
                            NameAr = "دفاع"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsTypeCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<int>("MatchStatisticsTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MatchStatisticsTypeId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.ToTable("MatchStatisticsTypeCoefficient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7289),
                            IsPercentage = true,
                            MatchStatisticsTypeId = 1,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7290),
                            Name = "Possession",
                            NameAr = "استحواذ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7294),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 1,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7295),
                            Name = "Shots On Target",
                            NameAr = "تسديدات علي المرمي"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7297),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 1,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7298),
                            Name = "Passes",
                            NameAr = "تمريرات"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7300),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 1,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7306),
                            Name = "Corners",
                            NameAr = "ركنيات"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7307),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 1,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7308),
                            Name = "Free Kicks",
                            NameAr = "ضربات حرة"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7312),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 2,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7313),
                            Name = "Penalties",
                            NameAr = "ضربات الجزاء"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7315),
                            IsPercentage = true,
                            MatchStatisticsTypeId = 2,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7316),
                            Name = "Pass Accuracy",
                            NameAr = "دقة التمريرات"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7318),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 2,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7318),
                            Name = "Chances Created",
                            NameAr = "اتاحة فرص"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7320),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 2,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7321),
                            Name = "Crosses",
                            NameAr = "تقاطعات"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7327),
                            IsPercentage = true,
                            MatchStatisticsTypeId = 2,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7328),
                            Name = "Crosses Success",
                            NameAr = "تقاطعات ناجحة"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7331),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 3,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7332),
                            Name = "Tackles Made",
                            NameAr = "تدخلات مصنوعة"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7337),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 3,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7346),
                            Name = "Interceptions",
                            NameAr = "اعتراضات"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7348),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 3,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7349),
                            Name = "Blocked sheets",
                            NameAr = "تصديات"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7351),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 3,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7352),
                            Name = "Clearances",
                            NameAr = "تخليص"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7354),
                            IsPercentage = false,
                            MatchStatisticsTypeId = 3,
                            ModifiedOn = new DateTime(2022, 9, 8, 21, 53, 54, 22, DateTimeKind.Local).AddTicks(7354),
                            Name = "Goalkeeper Saves",
                            NameAr = "انقاذات حارس المرمي"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TagId");

                    b.ToTable("MatchTag", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MediaPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExclusiveContent")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CoachId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("MediaPhoto", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MediaTag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("LegendId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchEventId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("LegendId");

                    b.HasIndex("MatchEventId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VideoId");

                    b.ToTable("MediaTag", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MembershipCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("MembershipCards");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Moment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("MediaFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MomentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Moments");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MomentVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("VideoType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("MomentVideo", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MomentVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MomentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.HasIndex("MomentId");

                    b.ToTable("MomentVotes");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.NormalVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CoachId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("NormalVideo", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("EnableAll")
                        .HasColumnType("bit");

                    b.Property<Guid>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MatchStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("News")
                        .HasColumnType("bit");

                    b.Property<bool?>("NightMode")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlaySounds")
                        .HasColumnType("bit");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PersonalAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.ToTable("PersonalAchievement", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("BiographyAr")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CityOfBirthId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryHeLiveIn")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityOfBirthId");

                    b.HasIndex("CountryHeLiveIn");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamCategoryId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "He is Egypt's best goalkeeper and was raised in Al Ahly as one of our homegrown players.He left the club to gain more experience and playtime in different Egyptian teams.After his great performance, he rejoined Al Ahly and proved himself as one of the top goalkeepers in Egypt. El Shenawy represented our national team in 2018 World Cup after his second season with AlAhly.",
                            BirthDate = new DateTime(1988, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 191,
                            IsDeleted = false,
                            Name = "Mohamed El-Shinawy",
                            NameAr = "محمد الشناوي",
                            Number = 1,
                            Pic = "shinawy.png",
                            PositionId = 1,
                            Weight = 86
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1988, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Ali Malol",
                            NameAr = "علي معلول",
                            Number = 11,
                            Pic = "malol.png",
                            PositionId = 5,
                            Weight = 71
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Percy Tau",
                            NameAr = "بيرسي تاو",
                            Number = 23,
                            PositionId = 3,
                            Weight = 71
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Ahmed Abd-Elqader",
                            NameAr = "أحمد القادر",
                            Number = 35,
                            PositionId = 4,
                            Weight = 71
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Mohamed Sherif",
                            NameAr = "محمد شريف",
                            Number = 10,
                            PositionId = 2,
                            Weight = 71
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Hamdi Fathy",
                            NameAr = "حمدي فتحي",
                            Number = 8,
                            PositionId = 8,
                            Weight = 71
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Yasser Ibrahim",
                            NameAr = "ياسر إبراهيم",
                            Number = 6,
                            PositionId = 7,
                            Weight = 71
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Rami Rabiea",
                            NameAr = "رامي ربيعة",
                            Number = 5,
                            PositionId = 7,
                            Weight = 71
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Mohamed Hany",
                            NameAr = "محمد هاني",
                            Number = 30,
                            PositionId = 6,
                            Weight = 71
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Amr Al-Sulayya",
                            NameAr = "عمرو السولية",
                            Number = 17,
                            PositionId = 9,
                            Weight = 71
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityOfBirthId = 1,
                            CountryHeLiveIn = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSigned = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 170,
                            IsDeleted = false,
                            Name = "Magdy Qafsha",
                            NameAr = "محمد مجدي قفشه",
                            Number = 19,
                            PositionId = 10,
                            Weight = 71
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PlayerTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeamTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTeam", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PlayerVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("FanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerVotes");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("GeneralPositionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPositionId");

                    b.ToTable("Position", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 1,
                            IsDeleted = false,
                            Name = "GoalKeeper",
                            NameAr = "حارس مرمي",
                            Symbol = "GK"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 4,
                            IsDeleted = false,
                            Name = "Center Forward",
                            NameAr = "مهاجم",
                            Symbol = "CF"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 4,
                            IsDeleted = false,
                            Name = "Right Wing",
                            NameAr = "جناح ايمن",
                            Symbol = "RW"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 4,
                            IsDeleted = false,
                            Name = "Left Wing",
                            NameAr = "جناح ايسر",
                            Symbol = "LW"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 2,
                            IsDeleted = false,
                            Name = "Right Back",
                            NameAr = "مدافع ايمن",
                            Symbol = "RB"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 2,
                            IsDeleted = false,
                            Name = "Left Back",
                            NameAr = "مدافع ايسر",
                            Symbol = "LB"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 2,
                            IsDeleted = false,
                            Name = "Center Back",
                            NameAr = "قلب دفاع",
                            Symbol = "CB"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 3,
                            IsDeleted = false,
                            Name = "Center Midfielder",
                            NameAr = "وسط ملعب",
                            Symbol = "CM"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 3,
                            IsDeleted = false,
                            Name = "Defensive Midfielder",
                            NameAr = "وسط مدافع",
                            Symbol = "DM"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneralPositionId = 3,
                            IsDeleted = false,
                            Name = "Attacking Midfielder",
                            NameAr = "وسط مهاجم",
                            Symbol = "AM"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Referee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Gehad Gresha",
                            NameAr = "جهاد جريشه",
                            NationalityId = 1
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            Name = "Local",
                            NameAr = "محلي"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            Name = "African",
                            NameAr = "افريقي"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            Name = "International",
                            NameAr = "دولي"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("Season", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Egyptian League",
                            NameAr = "الدوري المصري",
                            StartDate = new DateTime(2019, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaAccount1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SocialMediaAccount");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SocialMediaAccount", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.SquadList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MatchId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PlayerId");

                    b.ToTable("SquadList", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Stadium", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cairo International Stadium",
                            NameAr = "استاد القاهره الدولي"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Substitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SubstitutionPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("SubstitutionPlayerId")
                        .IsUnique();

                    b.ToTable("Substitution", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TypeId");

                    b.ToTable("Team", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "El Zamalek",
                            NameAr = "الزمالك",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "El Asmaily",
                            NameAr = "الاسماعيلي",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "El Masry",
                            NameAr = "المصري",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TeamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("TeamType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Egyptian Team",
                            NameAr = "فريق مصري"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TextAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Title", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Text = "Coach",
                            TextAr = "مدير فني"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Text = "Football Manager",
                            TextAr = "مدير كرة القدم"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Trophy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrophyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TrophyTypeId");

                    b.ToTable("Trophy", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            Name = "Egyptian League",
                            NameAr = "الدوري المصري",
                            TrophyTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            IsDeleted = false,
                            Name = "African Cup",
                            NameAr = "دوري ابطال افريقيا",
                            TrophyTypeId = 2
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TrophyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("TrophyId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrophyId");

                    b.ToTable("TrophyHistory", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TrophyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("TrophyType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Local Trophy",
                            NameAr = "ذكري محلية"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "African Trophy",
                            NameAr = "ذكري افريقية"
                        });
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.UserMembership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembershipCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "MembershipCardId");

                    b.HasIndex("MembershipCardId");

                    b.ToTable("UserMemberships");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMotion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserOtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendData")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserOtp");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Admin", b =>
                {
                    b.HasBaseType("AhliFans.Core.Feature.Security.Entities.User");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Fan", b =>
                {
                    b.HasBaseType("AhliFans.Core.Feature.Security.Entities.User");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FireBaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("Language")
                        .HasColumnType("int");

                    b.Property<int>("LinkedWith")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex("CityId");

                    b.ToTable("Fan", (string)null);
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Category", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.City", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Coach", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("AhliFans.Core.Feature.Entities.TeamType", "TeamCategory")
                        .WithMany()
                        .HasForeignKey("TeamCategoryId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Title", "Title")
                        .WithMany("Coaches")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_Coach_Title");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("TeamCategory");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.FanNotification", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "Fan")
                        .WithMany("FanNotifications")
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Notification", "Notification")
                        .WithMany("FanNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fan");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.FanPreference", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Trophy", "AfricanTrophy")
                        .WithMany()
                        .HasForeignKey("AfricanTrophyId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "Fan")
                        .WithMany("FanPreferences")
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_FanPreference_Fan");

                    b.HasOne("AhliFans.Core.Feature.Entities.Trophy", "LocalTrophy")
                        .WithMany()
                        .HasForeignKey("LocalTrophyId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("FanPreferences")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_FanPreference_Player");

                    b.Navigation("AfricanTrophy");

                    b.Navigation("Coach");

                    b.Navigation("Fan");

                    b.Navigation("LocalTrophy");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Honor", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany("Honors")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_Honor_Coach");

                    b.HasOne("AhliFans.Core.Feature.Entities.PersonalAchievement", null)
                        .WithMany("Honors")
                        .HasForeignKey("PersonalAchievementId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("Honors")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Honor_Player");

                    b.HasOne("AhliFans.Core.Feature.Entities.Season", null)
                        .WithMany("Honors")
                        .HasForeignKey("SeasonId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Trophy", "Trophy")
                        .WithMany()
                        .HasForeignKey("TrophyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Player");

                    b.Navigation("Trophy");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Jersey", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.LeagueDates", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.League", "League")
                        .WithMany("Dates")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Match", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.BroadcastChannel", "BroadcastChannel")
                        .WithMany()
                        .HasForeignKey("BroadcastChannelId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Jersey", "Jersey")
                        .WithMany()
                        .HasForeignKey("JerseyId");

                    b.HasOne("AhliFans.Core.Feature.Entities.LeagueDates", "LeagueDate")
                        .WithMany()
                        .HasForeignKey("LeagueDateId");

                    b.HasOne("AhliFans.Core.Feature.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Team", "OpponentTeam")
                        .WithMany("Matches")
                        .HasForeignKey("OpponentTeamId")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Team");

                    b.HasOne("AhliFans.Core.Feature.Entities.Referee", "Referee")
                        .WithMany("Matches")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Refere");

                    b.HasOne("AhliFans.Core.Feature.Entities.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Season");

                    b.HasOne("AhliFans.Core.Feature.Entities.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .IsRequired()
                        .HasConstraintName("FK_Match_Stadium");

                    b.Navigation("BroadcastChannel");

                    b.Navigation("Jersey");

                    b.Navigation("League");

                    b.Navigation("LeagueDate");

                    b.Navigation("OpponentTeam");

                    b.Navigation("Referee");

                    b.Navigation("Season");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchBroadcastChannel", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.BroadcastChannel", "Channel")
                        .WithMany("MatchBroadcastChannels")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchBroadcastChannels_BroadcastChannel");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchCard", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "TargetPlayer")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");

                    b.Navigation("Match");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchEvent", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.MatchEventType", "MatchEventType")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchEventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchEvent_MatchEventType");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchEvent_Match");

                    b.Navigation("Match");

                    b.Navigation("MatchEventType");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchGoal", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("AdminCreateId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("AdminModifyId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Scorer")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");

                    b.Navigation("Match");

                    b.Navigation("Scorer");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchLineUp", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("MatchLineUps")
                        .HasForeignKey("MatchId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchLineUp_Match");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("MatchLineUps")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchLineUp_Player");

                    b.HasOne("AhliFans.Core.Feature.Entities.Position", "Position")
                        .WithMany("MatchLineUps")
                        .HasForeignKey("PositionId");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchMedia", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("Media")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchPlayer", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatistic", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("Statistics")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MatchStatistics_Match");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.MatchStatisticsTypeCoefficient", "StatisticsCoefficient")
                        .WithMany("MatchStatistics")
                        .HasForeignKey("StatisticsCoefficientId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchStatistics_MatchStatisticsTypeCoefficient");

                    b.HasOne("AhliFans.Core.Feature.Entities.MatchStatisticsType", "StatisticsType")
                        .WithMany("MatchStatistics")
                        .HasForeignKey("StatisticsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MatchStatistics_MatchStatisticsType");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");

                    b.Navigation("Match");

                    b.Navigation("StatisticsCoefficient");

                    b.Navigation("StatisticsType");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsType", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsTypeCoefficient", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.MatchStatisticsType", "MatchStatisticsType")
                        .WithMany("MatchStatisticsTypeCoefficients")
                        .HasForeignKey("MatchStatisticsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MatchStatisticsTypeCoefficient_MatchStatisticsType");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");

                    b.Navigation("MatchStatisticsType");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchTag", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("MatchTags")
                        .HasForeignKey("MatchId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchTag_Match");

                    b.HasOne("AhliFans.Core.Feature.Entities.Tag", "Tag")
                        .WithMany("MatchTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchTag_Tags");

                    b.Navigation("Match");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MediaPhoto", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Category", "Category")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.MediaPhoto", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.MediaPhoto", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coach");

                    b.Navigation("CreatedBy");

                    b.Navigation("League");

                    b.Navigation("Match");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MediaTag", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany("MediaTags")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_MediaTag_Coach");

                    b.HasOne("AhliFans.Core.Feature.Entities.LegendBirthDate", "Legend")
                        .WithMany("MediaTags")
                        .HasForeignKey("LegendId")
                        .HasConstraintName("FK_MediaTag_LegendBirthDate");

                    b.HasOne("AhliFans.Core.Feature.Entities.MatchEvent", "MatchEvent")
                        .WithMany("MediaTags")
                        .HasForeignKey("MatchEventId")
                        .HasConstraintName("FK_MediaTag_MatchEvent");

                    b.HasOne("AhliFans.Core.Feature.Entities.Photo", "Photo")
                        .WithMany("MediaTags")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_PlayerTag_Photo");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("MediaTags")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerTag_Player");

                    b.HasOne("AhliFans.Core.Feature.Entities.Video", "Video")
                        .WithMany("MediaTags")
                        .HasForeignKey("VideoId")
                        .HasConstraintName("FK_PlayerTag_Video");

                    b.Navigation("Coach");

                    b.Navigation("Legend");

                    b.Navigation("MatchEvent");

                    b.Navigation("Photo");

                    b.Navigation("Player");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MembershipCard", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "AdminModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AdminCreate");

                    b.Navigation("AdminModify");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Moment", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MomentVideo", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Category", "Category")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.MomentVideo", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.MomentVideo", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("League");

                    b.Navigation("Match");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MomentVote", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "Fan")
                        .WithMany()
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Moment", "Moment")
                        .WithMany()
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fan");

                    b.Navigation("Moment");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.NormalVideo", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Category", "Category")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.NormalVideo", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.NormalVideo", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coach");

                    b.Navigation("CreatedBy");

                    b.Navigation("League");

                    b.Navigation("Match");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Notification", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.NotificationSetting", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "Fan")
                        .WithMany()
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fan");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Player", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.City", "CityOfBirth")
                        .WithMany()
                        .HasForeignKey("CityOfBirthId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryHeLiveIn");

                    b.HasOne("AhliFans.Core.Feature.Entities.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Player_Position");

                    b.HasOne("AhliFans.Core.Feature.Entities.TeamType", "TeamCategory")
                        .WithMany()
                        .HasForeignKey("TeamCategoryId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("CityOfBirth");

                    b.Navigation("Country");

                    b.Navigation("Position");

                    b.Navigation("Team");

                    b.Navigation("TeamCategory");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PlayerTeam", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("PlayerTeams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlayerTeam_Player");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PlayerVote", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "Fan")
                        .WithMany()
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fan");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Position", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.GeneralPlayerPosition", "GeneralPosition")
                        .WithMany()
                        .HasForeignKey("GeneralPositionId");

                    b.Navigation("GeneralPosition");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Referee", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("AhliFans.Core.Feature.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Nationality");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Season", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.SocialMediaAccount", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Coach", "Coach")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_SocialMediaAccount_Coach");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerSocialMediaAccount_Player");

                    b.Navigation("Coach");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.SquadList", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "UserCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithMany("SquadLists")
                        .HasForeignKey("MatchId")
                        .IsRequired()
                        .HasConstraintName("FK_SquadList_Match");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Admin", "UserModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithMany("SquadLists")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_SquadList_Player");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("UserCreate");

                    b.Navigation("UserModify");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Stadium", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Substitution", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Match", "Match")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.Substitution", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "Player")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.Substitution", "PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Entities.Player", "SubstitutionPlayer")
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Entities.Substitution", "SubstitutionPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("SubstitutionPlayer");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Team", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("AhliFans.Core.Feature.Entities.TeamType", "Type")
                        .WithMany("Teams")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Team_TeamType");

                    b.Navigation("Region");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Trophy", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "UserModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("AhliFans.Core.Feature.Entities.TrophyType", "TrophyType")
                        .WithMany("Trophies")
                        .HasForeignKey("TrophyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Trophy_TrophyType");

                    b.Navigation("TrophyType");

                    b.Navigation("UserCreate");

                    b.Navigation("UserModify");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TrophyHistory", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.Trophy", "Trophy")
                        .WithMany("TrophyHistories")
                        .HasForeignKey("TrophyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrophyHistory_Trophy");

                    b.Navigation("Trophy");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.UserMembership", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.MembershipCard", "Card")
                        .WithMany()
                        .HasForeignKey("MembershipCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Fan", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.RoleClaim", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserClaim", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserLogin", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserOtp", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "User")
                        .WithOne("Otp")
                        .HasForeignKey("AhliFans.Core.Feature.Security.Entities.UserOtp", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserRole", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.UserToken", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Admin", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Security.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", "UserModify")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("UserCreate");

                    b.Navigation("UserModify");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Fan", b =>
                {
                    b.HasOne("AhliFans.Core.Feature.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("AhliFans.Core.Feature.Security.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("AhliFans.Core.Feature.Security.Entities.Fan", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.BroadcastChannel", b =>
                {
                    b.Navigation("MatchBroadcastChannels");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Coach", b =>
                {
                    b.Navigation("Honors");

                    b.Navigation("MediaTags");

                    b.Navigation("SocialMediaAccounts");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.League", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.LegendBirthDate", b =>
                {
                    b.Navigation("MediaTags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Match", b =>
                {
                    b.Navigation("MatchEvents");

                    b.Navigation("MatchLineUps");

                    b.Navigation("MatchTags");

                    b.Navigation("Media");

                    b.Navigation("SquadLists");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchEvent", b =>
                {
                    b.Navigation("MediaTags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchEventType", b =>
                {
                    b.Navigation("MatchEvents");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsType", b =>
                {
                    b.Navigation("MatchStatistics");

                    b.Navigation("MatchStatisticsTypeCoefficients");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.MatchStatisticsTypeCoefficient", b =>
                {
                    b.Navigation("MatchStatistics");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Notification", b =>
                {
                    b.Navigation("FanNotifications");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.PersonalAchievement", b =>
                {
                    b.Navigation("Honors");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Photo", b =>
                {
                    b.Navigation("MediaTags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Player", b =>
                {
                    b.Navigation("FanPreferences");

                    b.Navigation("Honors");

                    b.Navigation("MatchLineUps");

                    b.Navigation("MediaTags");

                    b.Navigation("PlayerTeams");

                    b.Navigation("SocialMediaAccounts");

                    b.Navigation("SquadLists");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Position", b =>
                {
                    b.Navigation("MatchLineUps");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Referee", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Season", b =>
                {
                    b.Navigation("Honors");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Stadium", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Tag", b =>
                {
                    b.Navigation("MatchTags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Team", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TeamType", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Title", b =>
                {
                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Trophy", b =>
                {
                    b.Navigation("TrophyHistories");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.TrophyType", b =>
                {
                    b.Navigation("Trophies");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Entities.Video", b =>
                {
                    b.Navigation("MediaTags");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Otp");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AhliFans.Core.Feature.Security.Entities.Fan", b =>
                {
                    b.Navigation("FanNotifications");

                    b.Navigation("FanPreferences");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
